//================================================== INTRODUCTION
    //--------------------------------------------------------------------------------------------------------"
    //--------------------------------------------------------------------------------------------------------"
    //-------------------------------------------    FULL-AUTO!    -------------------------------------------"
    //-----------------------------    A 2021 CSGO autoexec.cfg file by J-Pop    -----------------------------"
    //--------------------------    Ready for action, prepared for customisation    --------------------------"
    //--------------------------------------------------------------------------------------------------------"
    //--------------------------------------------------------------------------------------------------------"
 
    // VIEWING/EDITING
        // First things first, how to view and edit this unwieldy beast! My tool of choice is Microsoft VS Code, loathe as I am to trust electron and admit that MS got it right, for once, but they really did and I wouldn't want to work without it. That said, I'm sure any code editor, and even advanced notepad replacements (Notepad++), offer code grouping and collapsing or "nesting". So long as it does, hovering down the left side of the software and to the right of the line numbers will show various arrow indicators, pointing left (collapsed) or down (expanded), clicking will then expand or collapse the nested group beside it. I have separated the settings into sections and subheadings to contain, isolate and make it more logical to find the specific setting that you are looking for. It might seem overwhelming to begin with but if you begin with everything collapsed and slowly work through it till the end, uncollapsing only as you go, it'll be a rewarding and enlightening experience... I hope.
    
    // PERSONAL NOTE
        // It took me around 3 weeks to complete this project in all. The first week of which I hadn't even had the idea to do this yet. I was just getting back to the game after being absent for a very long time, tweaking all of my settings ingame before then moving on to my autoexec, a thing I used to love messing around with. At some point, the research was already becoming a fair bit of work and I could see a "gap in the market". So I just dove into doing an up-to-date autoexec that I could share with my friends and the community. Then at some point it became this “ultimate” autoexec and is pretty much the result you see here. Though feedback and updates have already changed it a fair bit, since its first incarnation, we're slowly reaching the conclusion.
        // It took a week of solid research, compiling, collating and setting up the file. Then, after the initial feedback I received, I changed some values and spent another week getting deeper into the technical theory behind the more advanced concepts and set about implementing the definitions into my work so that it was all in one single, more straightforward or digestible and presentable format.
        // Most of the real work, in originally finding these convars, manipulating them, tweaking and testing and just generally being smarter (than me especially), has been many other peoples work over the years. I've just come in at the last minute and put it all together and hopefully made it look pretty and make a tiny bit more sense in layman's terms!
        // As such, this project absolutely could not exist without those aforementioned people. A few of the biggest resources throughout this project have been the other users, on Reddit or the Steam Community forums, various question/answer sites, social media and Youtube. I wanted to specifically mention and thank a few particular ones though.
        //
        // Firstly, TotalCSGO (despite the toxic full page background advert for a CSGO gambling site) is an immeasurably helpful place. It contains every command, bind, key, that CSGO ever had or has. Not everything is correct and up-to-date, nor are some of the descriptions as helpful but it's a great resource nonetheless.
        // https://totalcsgo.com/
        //
        // Beyond that, KiloSwiss's autoexec cfg was pivotal. I had already begun work on mine in earnest, when days later I stumbled on their attempt at sort of doing this same project. The resultant autoexec.cfg offered so many descriptions and values that either TotalCSGO didn't or that were nowhere near as understandable
        // https://gist.github.com/KiloSwiss/a015b0620284ce74b5ed849ec599e51e
        //
        // Another massive shout out goes to the genius known only as "Aplies" on pastebin, whose intelligent ramblings on rates in CSGO are funny, if a little mad, and extremely enlightening. I wish I could find a real person behind the username to thank them properly. I understand vastly more about netcode, and the Source engine specifically, all thanks to them.
        // https://pastebin.com/2bBFijFY
        //
        // One final thank you goes to KnotzTV on the Reddit thread where I originally shared this project, for providing some immediate, valuable feedback. As well as catching some important errors/oversight, questioning my choices and reminding me of things I'd forgotten in the midst of it all.
        // https://www.reddit.com/r/GlobalOffensive/comments/m79nmj/csgo_autoexec_2021_cfg_and_help_for/gre1siu/?utm_source=reddit&utm_medium=web2x&context=3
        //
        // I guess I should also thank Valve, but coming back to the game after all this time, I find it needs a lot of work to bring it into the 202?'s, not the least of which an autoexec can change.
    
    // INSTALLATION
        // If you would like the same configuration to be used across multiple accounts on one system, put the autoexec.cfg file into the following folder:
        // <DRIVE_LETTER>:\<PATH_TO_STEAM>\SteamApps\common\Counter-Strike Global Offensive\csgo\cfg
        // Example - C:\Program Files (x86)\Steam\SteamApps\common\Counter-Strike Global Offensive\csgo\cfg
        //
        // If you would prefer separate configurations for different accounts on your computer [Recommended], put the autoexec.cfg file into the following folder:
        // <DRIVE_LETTER>:\\<PATH_TO_STEAM>\userdata\<YOURID>\730\local\cfg
        // Example - C:\Program Files (x86)\Steam\userdata\<YOURID>\730\local\cfg
        //
        // You will see a message in the developer console if the autoexec is successfully loaded upon launch.
        // You can open the developer console with the key selected in the value under the "toggleconsole" entry in the CONTROLS > KEYBOARD section (Default = "~" otherwise known as Tilde, or "`" otherwise known as Grave on Linux and MacOS).
        //
        // If the config file does not load automatically, you can type the following into the console (without the "quotation marks"):
        // "+exec autoexec"
        // and press enter. You will then be notified of whether the game has successfully loaded the autoexec.cfg file, as it will display the contents of the "EXECUTION" section at the end of this file.
        //
        // You can also force the autoexec.cfg file to load automatically on every launch by adding it to your launch options, through; opening Steam, going to your game library, right-clicking the entry for Counter-Strike: Global Offensive, selecting "Properties" then under the heading "LAUNCH OPTIONS" and in the text box below it, enter the following (again without the "quotation marks"):
        // "+exec autoexec"
    
//==================================================
 
 
//================================================== LAUNCH OPTIONS
    // Open Steam, go to your game library, right-click the entry for Counter-Strike: Global Offensive, select "Properties" and under the heading "LAUNCH OPTIONS", in the text box below it, enter the following (without the "quotation marks"):
    // "-novid -nojoy -nosteamcontroller"
    // -novid = Disable introductory videos to jump right into the games main menu
    // -nojoy, -nosteamcontroller = Disable joystick and steam controller support for the game. Long thought to free up RAM and allow the game to launch faster but it's highly debated whether this has any noticeable impact on performance or not anymore. Still, it can't hurt so long as you don't use either
    // +exec autoexec = Ensures that the autoexec.cfg file is read and executed
    // NOTE: Any other launch options are not worth the trouble and likely snake oil, bar a few useful but very specific ones (-windowed, -fullscreen, -language <NAME>, to name a few). Valve has worked hard to make most of the launch options obsolete, for better or worse, and some of them have always caused issues anyway, others never worked in CSGO specifically in the first place. Stick to the above ones and you should be fine... until these are phased out as well at least.
 
    trusted_launch "1" // Launches CSGO in Trusted Mode, preventing interactions between the game exe and external applications e.g. performance overlays, as well as stopping stream software from capturing CSGO specifically. Basically, Valve brought a sledgehammer to a knife fight (0 = Disabled, 1 = Enabled. Default = 1).
 
    sv_competitive_minspec "0" // Enforces minimum/maximum values contained in the spec for professional level play (0 = Disabled/Unenforced, 1 = Enabled/Enforced. Default = 0).
//==================================================
 
 
//================================================== GAMEPLAY
    gameinstructor_enable "0" // Hints (Disabled = 0, Enabled = 1. Default = 1).
    cl_showhelp "0" // Some more hints (Disabled = 0, Enabled = 1. Default = 1).
    cl_autohelp "0" // Yo dawg, I heard you like hints... (Disabled = 0, Enabled = 1. Default = 1).
    cl_autowepswitch "0" // Automatically switch to weapons as they are picked up (0 = Disabled, 1 = Enabled. Default = 1).
    cl_sniper_delay_unscope "0" // Delay unscope and reload animation on sniper rifle (0 = Disabled, 1 = Enabled. Default = 0).
    cl_use_opens_buy_menu "0" // Pressing the key selected under the "+use" binding value (Default = "E") will open the buy menu if in a buy zone (0 = Disabled, 1 = Enabled. Default = 1).
    closeonbuy "0" // Closes the  radial buy menu after every purchase (0 = Disabled, 1 = Enabled. Default = 0).
    cl_buywheel_nomousecentering "0" // Prevent radial buy menu from centering mouse on the menu (0 = Disabled, 1 = Enabled. Default = 0).
    cl_buywheel_nonumberpurchasing "0" // Prevent purchasing from radial buy menu via number keys (0 = Disabled, 1 = Enabled. Default = 0).
    cl_buywheel_donate_key "0" // Holding the key selected in this value whilst purchasing items in the radial buy menu will donate the purchased item to another player (Default = 0), values as follows:
        // 0 = Left Control
        // 1 = Left Alt
        // 2 = Left Shift
    cl_playerspray_auto_apply "1" // Automatically apply highlighted graffiti when the radial graffiti menu closes (0 = Disabled, 1 = Enabled. Default = 1).
    cl_quickinventory_lastinv "0" // Tapping and releasing the radial weapon menu key, selected under the "+quickinv" binding value, selects your last used weapon (0 = Disabled, 1 = Enabled. Default = 1).
    option_duck_method "0" // Crouch key mode (0 = Hold to use, 1 = Toggle use. Default = 0).
    option_speed_method "0" // Walk key mode (0 = Hold to use, 1 = Toggle use. Default = 0).
//==================================================
 
 
//================================================== NETWORK
 
    //================================================== RATES
        // RATES ADVANCED NOTE
            // In online FPS games, servers have to simulate the game world constantly. This means calculating positions of objects, players, weapons, grenades, also things like ballistics, blood/damage decals, particle effects/physics. Not only that, but servers must keep track of where these things were, are and will be simultaneously (this is expanded on greatly in the TICKRATE and INTERPOLATION ADVANCED NOTE entries).
            // The servers do this job by calculating everything a certain amount of times per second, the more the better for the most part. A value such as once per second would be a horrendous experience. So, the servers simulate and update the game world in discrete time steps called "ticks". A "tickrate" is a measurement of how many ticks there are per second. So, assuming a base value of 1 second, a tickrate of 128 means the server simulates the world 128 times per second (1 second is 1000 milliseconds, divide this by the tickrate value, 128, and we have a result that tells us the game simulates the world every 7.8125 milliseconds. Whereas, a tickrate of 64, 1000 ÷ 64, means the game simulates the world every 15.625 milliseconds). 64 has always been the default tickrate on Valve servers, though dedicated servers use 128. Newer games vary wildly, with Valorant using 128, COD Warzone and PUBG reportedly using around 60 and Apex Legends (actually another Source engine game) using 20. Yes, 20.
            // For the most part, a higher tickrate provides a less "laggy", more responsive and truer representation of the game world overall. That said, tickrate is often intentionally limited to reduce instability introduced by a fluctuating tickrate, as well as to reduce CPU and data transmission costs for performance reasons. A lower tickrate, however, increases latency in the synchronization of the game simulation between the server and client, among other things creating what is now infamously called: desync, with such gems as rubber-banding.
            //
            // So in summary, tickrate is a measurement for how many times per second the server simulates and updates the game world, informing the client. 128 is considered by most the gold standard, or even bare minimum, especially in competitive play. Though Valve themselves, and many other developers, have yet to capitulate to the demand and so a value of around 60 is more common.
        cl_updaterate "64" // Maximum number of updates per second the client requests from the server. Refer to the TICKRATE ADVANCED NOTE entry below for more information on this setting (Minimum = 10, Maximum = 128. Default = 64).
        // TICKRATE ADVANCED NOTE
            // The servers internal update rate cannot be exceeded regardless of this settings value. As such, Valve default servers operate at a default tickrate of 64 and so values of 128 will only cause the client to demand more updates than it will actually be possible to receive. However, dedicated servers can and will correctly use a value of 128. Thus, 64 will be the stock setting here to keep compliance and circumvent any potential negative implications. BUT, this value must be changed via the console ingame if connecting to non-Valve dedicated servers operating at a tickrate of 128. This can be done by issuing the following command:
            // cl_updaterate "128"
            // as well as:
            // cl_cmdrate "128"
            // to the console and pressing enter after each line. This will change the value temporarily until the next launch or executing the autoexec.cfg file again.
        cl_cmdrate "64" // Maximum number of updates per second the client attempts to push to the server. This means that a value of 128 for this entry on the default Valve 64 tick servers, would have the client sending updates 128 times per second, wasting the last 64 of them as the server will only take the first 64. Also see the TICKRATE ADVANCED NOTE entry above for more information on the theory here (Minimum = 10, Maximum = 128. Default = 64).
        rate "128000" // The rate at which your client can receive network data in bytes per second. If the server attempts to send data at a higher rate than the value of this entry, this can result in packet loss. In theory, the value of this entry should be the value of your connection bandwidth. For example, to calculate for a connection with a maximum download rate equal to 1 Megabytes per second would be 1 Megabyte = 1024 KBytes so 1024 x 1024 = 1048576 bytes per second. With that, in the rates entry you would add a value of:
        // "1048576"
        // However, in the real world, games won't send data at 1 Mbytes per second, so a lesser value will suffice (Minimum = 20480, Maximum = 786432 [Recommended], Optimal = 128000. Default = 196608), values as follows:
            // 20480 = 160 kbps
            // 128000 = 0.96 Mbps (matches max tickrate)
            // 196608 = 1.5 Mbps
            // 262144 = 2.0 Mbps
            // 327680 = 2.5 Mbps
            // 393216 = 3.0 Mbps
            // 524288 = 4.0 Mbps
            // 786432 = 6+ Mbps
        cl_interpolate "1" // Interpolation (0 = Disabled [Deprecated], 1 = Enabled [Forced at server level]. Default = 1).
        // INTERPOLATION ADVANCED NOTE
            // Interpolation, in this case, is several mechanisms used by the Source engine to make sure the game retains its fluidity. It is measured in seconds (A value of 1 = 1 second or 1000 milliseconds, a value of 0.1 = 100 milliseconds, and so on and so forth). The final value of interpolation itself is determined by dividing the current value of the "cl_interp_ratio" convar by the current value of the "cl_updaterate" convar (cl_interp_ratio ÷ cl_updaterate = interpolation).
            //
            // If the entities in the game world were only rendered at the positions received by the server (see: TICKRATE ADVANCED NOTE), moving objects and animations would appear choppy. Dropped packets would also cause noticeable jitter. The trick to solve this problem is to go back in time for the rendering, meaning what you see on screen is not necessarily what IS happening but what WAS. This allows for the client itself to ensure players have an overall much smoother experience.
            //
            // So, for example, a "cl_interp_ratio" value equal to 0.1 means your game client will display the data received 100 milliseconds before the last/latest data received. Coupled with an "cl_updaterate" equal to 20, the game client would receive an update every 50 milliseconds (remember interpolation is 1 = 1 second or 1000 milliseconds, so interpolation ÷ update rate or 1000 ÷ 20 = 50 milliseconds). So with interpolation equal to 0.1, the client will go back in time 100 milliseconds or 2 updates (50 milliseconds + 50 milliseconds = 100 milliseconds).
        cl_interp_ratio "2" // Sets the interpolation ratio (Minimum = 1, Maximum = 5. Default = 2).
        // INTERPOLATION RATIO ADVANCED NOTE
            //  Ideally, this value should be set to 1 so long as you have a good enough connection, whereas if you expect issues such as high ping or packet loss a value of 2 is the correct choice. BUT, when playing competitively against opponents that have this value set to 2 versus your value of 1, you could technically be at a disadvantage, albeit very slight. As such, the only sensible choice and conclusion is therefore a value of 2. This way the game retains its fluidity, protection against packet loss and isn't at a disadvantage compared to other players. What this means technically, is that you will retain 2000 milliseconds worth of updates (cl_interp_ratio ÷ cl_updaterate or 2000 ÷ 64 = 31.250, so 2000ms worth of updates at every 31.250ms or 2000 ÷ 31.250 = 64 updates per second. For 128 tick servers, for example, cl_interp_ratio ÷ cl_updaterate or 2000 ÷ 128 = 15.625, so 2000ms worth of updates at every 15.625ms = 128 updates per second).
            // Now. you might be thinking, and would technically be correct, that a value of 1 would keep only the most recent representation of the simulation, meaning more accurate to the current positions etc and less "overhead". But, thanks to "cl_lagcompensation" this is not as simple as it seems.
        cl_lagcompensation "1" // Perform server side lag compensation of weapon firing events (0 = Disabled, 1 = Enabled. Default = 1).
        // LAG COMPENSATION ADVANCED NOTE
            // Between the representation of the game world that is currently displayed on your monitor and the simulation of the game world currently on the server, there is a HUGE difference. But, don't panic, the server knows the interpolation and ping of each player independently. So, the server can take care of the differences in configuration of each player using this convar.
            // There are times when you shoot that you feel your crosshair was not precisely aiming at another player or where you feel it was but when you shoot he doesn't get hurt or die. The server calculates events as such: current server time - packet latency value - client interpolation value = command execution time. The command execution time means there is a difference between the reception time of updates that you send to the server (the real time of the real world) such as mouse input and the time which it actually occurs ingame (simulated time). To compute this simulated time from the real time, the server takes note of your ping (the round-trip time of the data from client to server) and of your interpolation time, without cl_lagcompensation the disparity between input - output would be even bigger.
            //
            // *At some point, I think I will add a note here delving into the equally deep and thorny topic of localised input latency, such as physical inputs (mouse and keyboard), as well as physical outputs (monitor and audio) and also operating system implications.*
        cl_predict "1" // Perform client-side predictions prior to the server-side calculations (0 = Disabled, 1 = Enabled. Default = 1).
        // PREDICT ADVANCED NOTE
            // This is another mechanism which the engine uses to smooth out the simulation and provide a more fluid experience. With a "cl_predict" value of 1 (meaning input prediction activated), the client will extrapolate the players intervening positions AFTER sending an update to the server of the players input and before receiving a response, technically moving before the server is aware and then correcting it with the next update returned from the server. Which will either continue until the completion of the match or cause rubber-banding.
            // Let's assume a player has a network latency of 150 milliseconds and starts to move forward. The information that the forward key is pressed is stored in a user command packet and sent to the server. There, the user command is processed and the player's character model is moved forward in the game world. This world state change is then transmitted to all clients with the next snapshot update. So the player would see his actual movement with a 150 milliseconds delay after he started walking. This delay applies to all player actions like movement and ballistics etc, and is worsened with higher latencies/packet loss which can result in lag/jitter.
            // A delay between the actual player input and the corresponding visual feedback can create a disjointed and unnatural disconnect that makes it hard to move or aim precisely. Client-side input prediction is a way to remove this delay and let the player's actions feel more instant. Instead of waiting for the server to update the position, the local client just predicts the results of its own user commands which it still sends to the server for processing. As the client runs exactly the same code and rules the server will use to process the user commands, the result should be identical. After the prediction is finished, the local player will move instantly to the new location while the server still sees him at the old place.
        cl_predictweapons "1"  // Perform client side predictions prior to the server-side calculations (0 = Disabled, 1 = Enabled. Default = 1).
        mm_dedicated_search_maxping "50" // The maximum preferred ping when connecting to matchmaking servers (Minimum = 25, Maximum = 350. Default = 150).
            // Allows to specify the optimal or preferable ping that the client should look for when searching official matchmaking servers for a game. If there are official servers matching this value available, then matchmaking will prioritise joining a match hosted on those servers. If there are no official servers nearby matching this ping value, then official matchmaking will select a match hosted on the next nearest/lowest official server (latency to which may exceed this ping value).
        net_splitrate "1" //  Number of fragments for a split packet that can be sent per frame (Default = 1).
        net_maxroutable "1200" // Maximum size before packets are split (Minimum = 576, Maximum = 1200. Default = 1200).
        net_allow_multicast "1" // Multicast (0 = Disabled, 1 = Enabled. Default = 1).
        // STEAM DATAGRAM RELAY (SDR)
            // net_client_steamdatagram_enable_override "0" // SDR override (-1 = Always use SDR if possible, 0 = Use connect method requested by game client, 1 = Always use direct UDP if possible. Default 0).
            // net_steamcnx_allowrelay "1" // Use the relay servers as a fallback. Best if instead specified in console "+net_steamcnx_allowrelay 1" (Default = 1).
            // net_steamcnx_enabled "1" // Use steam connections as a fallback instead of raw UDP (1 = Disabled [UDP fallback], 2 = Enabled [enforced Steam fallback]. Default = 1).
        mm_session_search_qos_timeout "15" // Maximum Quality of Service timeout in seconds (Default = 15).
        cl_forcepreload "0" // Whether preloading model data into the cache should be forced on. This used to be one of the main tweaks people suggested adding to launch options, and there are STILL a lot of up to date websites that suggest to switch this from 0 to 1. Don't, it causes obvious hitches/stutters/visual lag. We know this not just from actual users but even a respected Valve employee that has worked in the Source engine for years, see https://www.reddit.com/r/GlobalOffensive/comments/adq2a4/never_install_csgo_on_an_old_hard_drive/edlbh3d/?st=JQSQ5GJB&sh=5d987640 (Default = 0).
        cl_timeout "30" // How many seconds the client will wait without receiving a response from the server before disconnecting itself (Minimum = 4.0, Maximum = 30. Default = 30).
        cl_resend "2" // How many seconds the client will wait before sending a new connection request to the server (only has an effect BEFORE joining a server (Minimum = 1.5, Maximum = 20. Default = 6).
        cl_resend_timeout "12" // Total time allowed for the client to resend the 'connect' attempt (Minimum = 1.5, Maximum = 20000. Default = 60).
        cl_downloadfilter "none" // Filter for downloads from community servers (Default = All), values as follows:
            // auto = Applies the value from the ingame settings menu
            // all = Allows the download of all custom files
            // mapsonly = Download only custom maps
            // "nosounds" = Allows map, material and model downloads but blocks all sound based files
            // "none" = Blocks all downloads (map, material, model, sound etc)
    //==================================================
 
    //================================================== SOCIAL
        cl_join_advertise "0" // Automatically allow friends to click username and join the same game (Default = 1), values as follows:
            // 0 = Friends can only join games with an invite
            // 1 = Friends can join games but only on official servers
            // 2 = Friends can join games on official and community servers
        cl_invites_only_friends "1" // Ignore invites from anyone that isn't a friend (0 = Disabled, 1 = Enabled. Default = 0).
        cl_invites_only_mainmenu "1" // Ignore all invites when playing a match (0 = Disabled, 1 = Enabled. Default = 0).
        lobby_default_privacy_bits2 "0" // Default lobby permissions (Default = 0), values as follows:
            // 0 = Invite only
            // 1 = Friends only
            // 2 = Friends and group
            // 4 = Friends and nearby
            // 6 = Friends, group and nearby
        cl_filtertext_enabled "0" // Text filtering that blocks profane words from the chat (Default = 1).
    //==================================================
 
//================================================== NETWORK
 
 
//================================================== UI
    // UI ADVANCED NOTE
        // The best way to customise this section to your own desires would be to first have a play in a well-known CSGO users Steam Workshop file, called: "Config Generator ✮ crashz & Misterio". This map will allow you to visually alter and test various customisations and options in real-time.
        // https://steamcommunity.com/sharedfiles/filedetails/?id=1325659427
        // Once complete, in the custom workshop map above you can output the resulting convar's to the console and copy/pasta them from the ingame console and into this file, in the appropriate sections. Ctrl + F to search for the convar's you're looking for and then simply alter the numbers to match your ingame results, this would probably be the safest way.
        // Best practice is to always have multiple backups. This original autoexec, then your custom one that you work with and then a backup of the latest custom one that you don't touch.
    //================================================== FUNCTIONS
        con_allownotify "1" // Ingame notifications (0 = Disabled, 1 = Enabled. Default = 1).
        con_enable "1" // Enables the developer console (0 = Disabled, 1 = Enabled. Default = 0).
        cl_radar_square_with_scoreboard "0" // Radar will be displayed in a square container when viewing the scoreboard, allowing for more of the map to be seen at any given time (0 = Circular, 1 = Squared. Default = 1).
        cl_disablefreezecam "1" // Disables freezecam on player death (0 = Disabled, 1 = Enabled. Default = 0).
        cl_disablehtmlmotd "1" // Disables "Message of the Day" for community servers (0 = Disabled, 1 = Enabled. Default = 0).
        cl_sanitize_player_names "0" // Replace players names with something nondescript and ultimately inoffensive (0 = Disabled, 1 = Enabled. Default = 0).
        cl_scoreboard_survivors_always_on "1" // Fix for incorrect calculations of dead players after rounds have ended (0 = Disabled, 1 = Enabled. Default = 0).
        cl_show_clan_in_death_notice "0" // Clan name will be shown next to player names in the death notices (0 = Disabled, 1 = Enabled. Default = 1).
        cl_hideserverip "1" // Hide server IP addresses in the console, except upon issuing the 'status' command (0 = Disabled, 1 = Enabled. Default = 0).
    //==================================================
 
    //================================================== GRAPHICS
        cl_showfps "0" // Draw the frames-per-second meter on screen (0 = Disabled, 1 = Enabled, 2 = Enabled and smoothed out with minimum/average values, 3 = Server setting, 4 = Enabled and logged to text file. Default = 0).
        mat_monitorgamma "1.6" // Gamma (Minimum = 1.6 [Light], Maximum = 2.6 [Dark]. Default = 2.2).
        mat_monitorgamma_tv_enabled "0" // TV Gamma (0 = Disabled, 1 = TV [Colour range 16-235], 2 = PC [Colour range 0-255]. Default = 0).
        // PERFORMANCE OPTIONS
            fps_max "999" // Caps the maximum framerate attainable ingame. Refer to the FPS ADVANCED NOTE entry below for more information on this topic (Minimum = 0 [Disabled], 30 = Low-spec gamer, 60 = Industry standard, Maximum = 999 [Unlocked]. 999 can be better than 0 for decreasing some loading times. Default = 400).
            // FPS ADVANCED NOTE
                // In basic terms, higher FPS does often equal an advantage for many reasons, among them are more fluid animations with less blurring/ghosting, as well as known quirk of some games and their engines which can see increased fire rates, or more bullets per second, from higher FPS values especially if they sync with the fire rate of ingame weapons, see:
                    // https://www.reddit.com/r/CompetitivePUBG/comments/ah1u8m/actual_reason_behind_wackyjackys_newest_find_and/
                    // https://www.reddit.com/r/FORTnITE/comments/9j5jk7/fire_rate_is_capped_by_your_fps_not_your_console/
                //
                // Anything below 30 will likely be nigh unplayable in competitive, whilst less than 60 cannot be recommended. The optimal setting here would be either: disabled/unlocked with the values 0/999 or capped at the refresh rate of your monitor, e.g. 60Hz = 60 FPS, 144Hz = 144 FPS etc. Anything beyond this is technically surplus.
                //
                // Testing as yet does not provide unequivocal evidence either way that monitors utilising 300Hz and up offer any game changing advantage, whereas the jump from 60Hz to anything north of 100Hz provides a discernible difference and a competitive edge for most players.
                //
                // Essential further reading on this topic:
                    // https://www.nvidia.com/en-us/geforce/news/what-is-fps-and-how-it-helps-you-win-games/
                    // https://www.nvidia.com/en-us/geforce/news/geforce-gives-you-the-edge-in-battle-royale/
            fps_max_menu "60" // Caps the maximum framerate when in the main menu (Minimum = 0 [Disabled], Maximum = 999 [Unlocked]. Default = 120).
            fullscreen "1" // Fullscreen or windowed mode (0 = Disabled [Windowed], 1 = Enabled [Recommended + Performance]. Default = 1).
            nowindowborder "0" // Borderless windowed mode (0 = Disabled [Window decorations], 1 = Enabled [Borderless]. Default = 1).
            cpu_level "2" // Effect detail (0 = Low [Performance], 1 = Med, 2 = High [Recommended], 9999999 = Autodetect. Default = 1).
            gpu_level "3" // Shader detail (0 = Low [Performance], 1 = Med, 2 = High, 3 = Very High [Recommended], 9999999 = Autodetect. Default = 1).
            mat_enable_uber_shaders "1" // Uber Shaders. These can make enemies more discernible in contrast to the scenery, thus it is hard to recommend disabling them if there is performance to spare (0 = Disabled [Performance], 1 = Enabled [Recommended]. Default = 1).
            gpu_mem_level "2" // Model/texture detail (0 = Low [Performance], 1 = Med, 2 = High [Recommended], 9999999 = Autodetect. Default = 1).
            mem_level "2" // Paged pool memory is the amount of memory that can spill over from physical memory into the slow page file (0 = 0-1024, 1 = 1024-1536, 2 = 1536+).
            mat_antialias "8" // Multisampling anti-aliasing (0 = Disabled/None, 2 = MSAA 2x, 4 = MSAA 4x, 8 = MSAA 8x. Default = 0).
            mat_software_aa_strength "0" // FXAA (0 = Disabled [Recommended], 1 = Enabled [Performance]. Default = 0).
            mat_forceaniso "16" // Texture filtering (0 = Bilinear [Performance], 1 = Trilinear, 2 = Anisotropic 2x, 4 = Anisotropic 4x, 8 = Anisotropic 8x, 16 = Anisotropic 16x [Recommended], 9999999 = Autodetect. Default = 1).
            mat_vsync "0" // Vsync. This very much depends on each use case. If you have even a remotely capable PC stear very clear of ever using Vsync. Should you have issues with performance though, testing vsync off, then vsync on with triple-buffering and comparing the results is a good idea. That said, this setting should almost always be disabled ingame and then forced either through the Nvidia Control Panel or RivaTuner Statistics Server for best results (0 = Disabled [Recommended + Performance], 1 = Double buffered, 2 = Triple buffered [Performance]. Default = 1).
            mat_triplebuffered "0" // Triple buffering (0 = Disabled, 1 = Enabled. Default = 0).
            mat_motion_blur_enabled "0" // Motion Blur (0 = Disabled [Recommended + Performance], 1 = Enabled. Default = 1).
            mat_queue_mode "2" // This setting determines the threading mode the material system uses, allowing multicore rendering. Another one of those settings with lots of mixed messaging. tl;dr, leave it at -1 and let the engine decide for you. If you have a good PC you can try a value of 2, whereas if you have a potato try 0. Probably best to try all options and compare results or as previously mentioned, leave at -1 (-1 = Client default, 0 = Synchronous single threaded, 1 = Queued single threaded, 2 = Multi-threaded. Default = -1).
            csm_quality_level "3" // Shadows (0 = Low [Performance], 1 = Med, 2 = High, 3 = Very High [Recommended], 9999999 = Autodetect. Default = 2).
            mat_powersavingsmode "0" // Power-saving mode for laptops (0 = Disabled [Recommended], 1 = Enabled. Default = 1).
            engine_no_focus_sleep "0" // Slow down background rendering when alt-tabbed out of the game. Reduces CPU load but if set too high can cause sound distortion if the "snd_mute_losefocus" value is set to 0 (Default = 50).
            r_dynamic 1 // Dynamic lighting effects, for example from muzzle flare of weapons discharging or when a flashbang/grenade explodes. Turning these off reportedly offers small performance gains but at the cost of not having as much visual information regarding enemy locations. As such, this tweak cannot be recommended (0 = Disabled [Performance option], 1 = Enabled [Recommended]. Default = 1).
            r_drawtracers_firstperson 1 // As the weapons shoot the bullets create "tracers" which are basically trails the bullets create as they travel through the air. Turning these off reportedly offers small performance gains but at the cost of not having as much visual information regarding aim/spread. As such, this tweak cannot be recommended (0 = Disabled [Performance option], 1 = Enabled [Recommended]. Default = 1).
            r_drawdecals "1" // Blood splatter and bullet impact decals that appear on surfaces (0 = Disabled [Performance option], 1 = Enabled [Recommended]. Default = 1).
            violence_hblood "0" // Low violence-esque mode without any blood decals (0 = Blood disallowed [Performance option], 1 = Blood allowed [Recommended]. Default = 1).
    //==================================================
 
    //================================================== CROSSHAIR
        // CROSSHAIR ADVANCED NOTE
            // The best way currently to find a crosshair that matches your needs and play style, is to use another of crashz' workshop files: "crashz' Crosshair Generator v3" located here:
            // https://steamcommunity.com/sharedfiles/filedetails/?id=308490450
            // This will enable you to check out presets, other popular players crosshairs and tweak them all to create your own.
             // Once complete, in the custom workshop map above you can output the resulting convar's to the console and copy/pasta them from the ingame console and into this file, in place of the section below titled "YOUR CROSSHAIR HERE" or you can input the values in place of the ones already here (this is much less destructive and retains my descriptions.
             // You should also read the section titled "FUNCTIONS" and change accordingly, but these are unrelated to the appearance of your base crosshair.
        // FUNCTIONS
            cl_crosshair_sniper_show_normal_inaccuracy "0" // Alters sniper weapon crosshairs so that standing inaccuracy also affects the blur of the sniper rifle crosshair (0 = Disabled, 1 = Enabled. Default = 0).
            cl_crosshair_sniper_width "2" // The width, in pixels, of the crosshair when scoped in with a sniper rifle (Default = 1).
            cl_crosshair_friendly_warning "2" // Display friendly fire indicator when aiming at teammates (0 = Disabled, 1 = Enabled only on "cl_crosshairstyle" values 0-1, 2 = Enabled on all "cl_crosshairstyle" values. Default = 1).
            cl_show_observer_crosshair "2" // Displays the crosshair of the player currently being observed (0 = Disabled, 1 = Only for friends and party members, 2 = All. Default = 1).
 
        // YOUR CROSSHAIR HERE
            crosshair "1" // Crosshair visibility (0 = Disabled, 1 = Enabled. Default = 1).
            cl_crosshairstyle "4" // Style of the crosshair (Default = 0), values as follows:
                // 0 = Default - Large dynamic scaleform crosshair (only cl_crosshaircolor can be used to customise)
                // 1 = Default Static - Small static scaleform crosshair (only cl_crosshaircolor and cl_fixedcrosshairgap can be used to customise)
                // 2 = Classic - Crosshair is dynamic when moving and gives separate visual feedback when firing (this value offers the most customisation)
                // 3 = Classic Dynamic - Crosshair is very dynamic/expands a lot when moving and gives smooth feedback when firing
                // 4 = Classic Static - Crosshair is completely static even with movement and upon firing weapons
                // 5 = Classic Dynamic "1.6" - Crosshair is static when moving but expands smoothly when firing
            cl_crosshairsize "1.5" // Controls the length of lines that make up the crosshair (Default = 5).
            cl_crosshairthickness "1.5" // Controls the thickness of the lines that make up the crosshair, as well as the size of the crosshair dot if "cl_crosshairdot" value is set to enabled (Default = 0.5).
            cl_crosshair_drawoutline "0" // Displays a black outline around crosshair lines themselves (0 = Disabled, 1 = Enabled. Default = 0).
            cl_crosshair_outlinethickness "1" // Thickness of the outline of the crosshair if enabled (Minimum = 0, Maximum = 3. Default = 1).
            cl_crosshairdot "0" // Displays a dot at the centre of the crosshair. Reducing the "cl_crosshairsize" value to 0 will make it so that there is only a dot as the crosshair. The value set for "cl_crosshairthickness" alters the size of the dot (0 = Disabled, 1 = Enabled. Default = 1).
            cl_crosshair_t "0" // Removes the uppermost vertical line on the crosshair, so that there are only 3 lines in a "T" shape rather than 4 in a cross shape, only applies to cl_crosshairstyle values 2-5 (0 = Disabled, 1 = Enabled. Default = 0).
            cl_fixedcrosshairgap "0" // Adjusts the gap between the lines that form the crosshair, only applies to "cl_crosshairstyle" value of 1 (Default = 3).
            cl_crosshairgap "-6.5" // Adjusts the gap between the lines that form the crosshair, only applies to "cl_crosshairstyle" values 2-5 (Default = 1).
            cl_crosshairgap_useweaponvalue "0" // Dynamically adjusts the size of the crosshair based on the weapon you have equipped (Default = 0).
            cl_crosshairusealpha "1" // Linear crosshair transparency (0 = 50% transparency, 1 = Applies the value set under " cl_crosshairalpha". Default = 1).
            cl_crosshairalpha "255" // Custom crosshair transparency (Minimum = 0 [Fully transparent], Maximum = 255 [Fully opaque]. Default = 200).
            cl_crosshaircolor "1" // The colour of the crosshair (Default = 1), values as follows:
                // 0 = Red
                // 1 = Green
                // 2 = Yellow
                // 3 = Blue
                // 4 = Cyan
                // 5 = Custom (Applies the custom colour values set under "cl_crosshaircolor_R/_G/_B" values)
            cl_crosshaircolor_r "255" // The saturation level of the red colour (Minimum = 0 [Weak], Maximum = 255 [Strong]. Default = 50).
            cl_crosshaircolor_g "255" // The saturation level of the green colour (Minimum = 0 [Weak], Maximum = 255 [Strong]. Default = 250).
            cl_crosshaircolor_b "255" // The saturation level of the blue colour (Minimum = 0 [Weak], Maximum = 255 [Strong]. Default = 50).
    //==================================================
 
    //================================================== VIEWMODEL
        cl_righthand "1" // Right or left-handed viewmodel (0 = Left-handed, 1 = Right-handed. Default = 1).
        viewmodel_fov "68" // Field-of-view (Minimum = 54, Maximum = 68. Default = 54).
        viewmodel_offset_x "-2.000000" // The position of the X weapon (Minimum = -2 [Left], Maximum = +2.5 [Right]. Default = 0).
        viewmodel_offset_y "-2.000000" // The position of the Y weapon (Minimum = -2 [Close], Maximum = +2 [Far]. Default = 0).
        viewmodel_offset_z "-2.000000" // The position of the Z weapon (Minimum = -2 [Lower], Maximum = +2 [Higher]. Default = 0).
        viewmodel_presetpos "0" // Viewmodel preset (Default = 1), values as follows:
            // 1 = Desktop - viewmodel_offset_x 1, viewmodel_offset_y 1, viewmodel_offset_z -1, viewmodel_fov 60
            // 2 = Couch - viewmodel_offset_x 0, viewmodel_offset_y 0, viewmodel_offset_z 0, viewmodel_fov 54
            // 3 = Classic - viewmodel_offset_x 2.5, viewmodel_offset_y 0, viewmodel_offset_z -1.5, viewmodel_fov 68
        cl_viewmodel_shift_left_amt "0.500000" // How much the viewmodel moves to the left when shooting accuracy increases (Minimum = 0.50, Maximum = 2. Default = 1.50).
        cl_viewmodel_shift_right_amt "0.250000" // How much the viewmodel moves to the right when shooting accuracy increases (Minimum = 0.25, Maximum = 2. Default = 0.75).
        viewmodel_recoil "0" // How much recoil is shown by the viewmodel when being shot at and subjected to aimpunch effects (Minimum = 0, Maximum = 1. Default = 1).
        cl_bob_lower_amt "5.000000" // The amount the weapon model is "hidden" when running, as the gun barrel moves back towards the player model (Minimum = 5, Maximum = 30. Default = 21).
        cl_bobamt_lat "0.100000" // Level of lateral movement of the weapon when running, adjusting how much the viewmodel sways side to side (Minimum = 0.1, Maximum = 2. Default = 0.33).
        cl_bobamt_vert "0.100000" // Level of lateral movement of the weapon when running, adjusting how much the viewmodel bobs up and down (Minimum = 0.1, Maximum = 2. Default = 0.14).
        cl_bobcycle "0.98" // The frequency of view bobbing. This cannot be altered anyway and as such is irrelevant (Minimum = 0.1, Maximum = 2. Default = 0.98).
    //==================================================
 
    //================================================== RADAR
        cl_radar_rotate "1" // Radar rotates with and based on player movement (0 = Disabled, 1 = Enabled. Default = 1).
        cl_hud_radar_scale "1.3" // Size of the radar in the HUD (Minimum = 0.8 [Smaller], Maximum = 1.3 [Bigger]. Default = 1).
        cl_radar_scale "0.4" // Overall scope of the map inside the radar (Minimum = 0.25, Maximum 1. Default = 0.7).
        cl_radar_always_centered "0" // Centering the map inside the radar on the players position (0 = Map centred to radar, 1 = Map centred on player. Default = 1).
        cl_radar_icon_scale_min "0.7" // The size of icons and markers on the radar (Minimum = 0.40, Maximum = 1.25. Default = 0.6).
        cl_teammate_colors_show "2" // Teammate differentiators on radar (0 = Disabled completely, 1 = Colour only, 2 = Colour and alphabetical letters. Default = 1).
        cl_color  "2" // Preferred player colour in matches (Default = 0), values as follows:
            // 0 = Yellow 
            // 1 = Purple 
            // 2 = Green
            // 3 = Blue
            // 4 = Orange
    //==================================================
 
    //================================================== HUD
        // SELF
            hud_scaling "0.75" // Controls the scale of various HUD elements (Minimum = 0.5 [Smaller], Maximum = 0.95 [Larger]. Default = 0.85).
            cl_hud_background_alpha "0.5"  // Opacity of the HUD background (Minimum = 0, Maximum = 1. Default = 0.5).
            cl_hud_color "8" // Colour of the HUD (Default = 0), values as follows:
                // 0 = Light Yellow
                // 1 = White
                // 2 = Light Blue
                // 3 = Blue
                // 4 = Purple
                // 5 = Red
                // 6 = Orange
                // 7 = Yellow
                // 8 = Green
                // 9 = Cyan
                // 10 = Light Pink
            cl_showloadout "1" // Show the current loadout on screen in the bottom right (Default = 1).
            cl_hud_healthammo_style "1"// Simple linear health bar beside standard numerical health and ammo readout (0 = Disabled, 1 = Enabled. Default = 0).
            cl_hud_bomb_under_radar "0" // Show the bomb icon below the radar, as well as in the inventory (0 = Inventory only, 1 = Both. Default = 1).
        // TEAM
            cl_hud_playercount_showcount "1" // Avatar and health display of surviving players (0 = Show, 1 = Show basic numerical count only. Default = 0).
            cl_hud_playercount_pos "1" // The surviving player's numerical readout at the top of the HUD (0 = Top, 1 = Bottom. Default = 0).
            cl_drawhud_force_teamid_overhead "0" // Display of teammate details above their heads (-1 = Disabled, 0 = Show with HUD, 1 = Always even when HUD is disabled. Default = 0).
            cl_teamid_overhead_mode "2" // Previously, this command was "cl_teamid_overhead_always". Display of teammate names and loadout above their heads (0 = Show teammate indicator only when in sight, 1 = Show teammate indicator "pip" through walls and smokes, 2 = Show teammate indicator "pip" as well as loadouts through walls and smokes. Default = 2).
            cl_teamid_overhead_maxdist "5000" // The max distance that the details above teammate's heads will be visible if the setting "cl_drawhud_force_teamid_overhead" and related "cl_teamid_overhead_mode" are enabled (Minimum = 200, Maximum = 5000. Default = 3000).
            cl_teammate_colors_show "1" // Displays teammates as individual colours or the same colour on the scoreboard and radar in competitive mode (0 = Disabled [will not show teammates as different colours], 1 = Enabled (shows teammates as different colours. Default = 1).
        // ENEMY
            hud_showtargetid "1" // Enables display of enemy names when aiming at them (0 = Disabled, 1 = Enabled. Default = 1).
    //==================================================
 
    //================================================== NETGRAPH
        net_graph "0" // Network statistics overlay (0 = Disabled, 1-3 = Enabled. Default = 0), values as follows:
            // 0 = Disabled
            // 1 = Basic netgraph
            // 2 = Advanced netgraph
            // 3 = Advanced netgraph with coloured graph
        net_graphpos "2" //  Netgraph position on screen (Default = 1), 0 and every value above 3 sets the distance from the left border of the screen in pixels depending on resolution, values as follows:
            // 0 = Left side
            // 1 = Right side
            // 2 = Middle
            // 3-600 = Distance in pixels from the left side of the screen
        net_graphheight "9999" // Netgraph distance from the bottom of the screen in pixels, depending on resolution (Default = 64).
        net_graphsolid "0" // Netgraph is shown as an opaque overlay (0 = Disabled, 1 = Enabled. Default = 1).
        net_graphtext "1" // Displays text-based statistics on the netgraph (0 = Disabled, 1 = Enabled. Default = 1).
        net_graphproportionalfont "1" // Set netgraph font to be proportional (0 = Disabled, 1 = Enabled. Default = 1).
        net_graphshowlatency "1" // Displays latency in the netgraph (0 = Disabled, 1 = Enabled. Default = 1).
        net_graphshowinterp "0" // Displays interpolation in the netgraph (0 = Disabled, 1 = Enabled. Default = 1).
        net_graphmsecs "500" // The measurement in milliseconds that the graph represents (Default = 400).
        sv_max_allowed_net_graph "1" // The maximum value shown on the net_graph (Minimum = 1, Maximum = 10. Default = 1).
    //==================================================
 
//================================================== UI
 
 
//================================================== AUDIO
 
    //================================================== GAME
        volume "0.75" // Overall volume level (Minimum = 0, Maximum = 1. Default = 1).
        snd_mixahead "0.025" // Sound buffer size. Raising this value can prevent sound bugs such as "crackling" sounds (Default = 0.025).
        snd_mix_async "1" // Asynchronous sound mixing (Default = 1).
        snd_pitchquality "1" // (Default = 1).
        snd_ducking_off "1" // (Default = 1).
        dsp_enhance_stereo "0" // Enhanced software-based 3D stereo sound (Default = 0).
        snd_surround_speakers "2" // Surround sound speaker setting (Default = 1), values as follows:
            // 0 = Headset/Headphones
            // 1 = Automatic
            // 2 = Stereo speakers
            // 4 = Quad surround sound
            // 5 = 5.1 surround sound
        snd_hwcompat "1" // Advanced 3D audio processing option [HRTF and Sound Occlusion] (0 = Enabled, 1 = Disabled. Default = 0).
        snd_mute_losefocus "0" // Mute game volume when alt-tabbed (0 = Unmuted, 1 = Muted. Default = 1).
        snd_musicvolume_multiplier_inoverlay "0" // Music volume when Steam overlay is active (Minimum = 0, Maximum = 1. Default = 1).
        snd_musicvolume "0.25" // Overall music volume (Minimum = 0, Maximum = 1).
        snd_menumusic_volume "0" // Main menu music volume (Minimum = 0, Maximum = 1. Default = 1).
        snd_roundstart_volume "0" // Round start music volume (Minimum = 0, Maximum = 1. Default = 1).
        snd_roundend_volume "0" // Round end music volume (Minimum = 0, Maximum = 1. Default = 1).
        snd_mapobjective_volume "0" // Bomb planted music volume (Minimum = 0, Maximum = 1. Default = 1).
        snd_tensecondwarning_volume "0.1" // 10 Second bomb timer music volume (Minimum = 0, Maximum = 1. Default = 1).
        snd_deathcamera_volume "0" // Deathcamera music volume (Minimum = 0, Maximum = 1. Default = 1).
        snd_mvp_volume "0.000000" // Round end MVP music volume (Minimum = 0, Maximum = 1. Default = 1).
        snd_mute_mvp_music_live_players "1" // MVP music if players from both teams are still alive (0 = Unmuted, 1 = Muted).
        snd_dzmusic_volume "0.000000" // DangerZone end game music (Minimum = 0, Maximum = 1).
        cl_player_ping_mute "1" // Controls when a player marks or "pings" a location in game (0 = Unmuted, 1 = Muted. Default = 1).
    //==================================================
 
    //================================================== VOIP
        voice_system_enable "1" // VOIP system (0 = Disallowed [completely disables the VOIP system, meaning voice cannot be transmitted or received], 1 = Allowed. Default = 1).
        voice_enable "1" // Ingame VOIP (0 = Disabled [still allows voice to be transmitted but not received], 1 = Enabled. Default = 1).
        voice_scale "0.75" // Volume of incoming player VOIP (Minimum = 0, Maximum = 1. Default = 1).
        voice_forcemicrecord "1" // Instruct the game to use an alternate microphone than the one currently set in the operating system as the default input device.
        voice_threshold "4000" // The threshold at which your microphone will begin to transmitting once surpassed, if using voice activation. In other words, when your voip is louder than this value, it will be transmitted in-game (Minimum = 300, Maximum = 4000. Default = 2000).
        voice_mixer_volume "0.08" // Volume of personal transmitted VOIP. A value of "-1" applies the operating system's current input device settings (Minimum = 0, Maximum = 1).
        voice_modenable "1" // Personal transmitted VOIP (0 = Disallowed [still allows voice to be received from other players but not transmitted], 1 = Allowed)
        voice_positional "0" // Positional VOIP ingame (0 = Disabled, 1 = Enabled. Default = 0).
        lobby_voice_chat_enabled "1" // Lobby/Queue VOIP (0 = Disabled, 1 = Enabled).
        cl_mute_all_but_friends_and_party "0" // Block all communication except friends and party members (0 = Disabled, 1 = Enabled. Default = 0).
        cl_mute_enemy_team "1" // Block all communication from the enemy team (0 = Disabled, 1 = Enabled. Default = 0).
        voice_caster_enable "0" // GOTV caster voice (0 = Disabled, 1 = Enabled. Default = 0).
        voice_caster_scale "1" // Volume of GOTV casters VOIP (Minimum = 0, Maximum = 1. Default = 1).
    //==================================================
 
//================================================== AUDIO
 
 
//================================================== CONTROLS
 
    //================================================== FUNCTIONS
        unbindall // Clears all previous/default keybindings, ready for personalised ones set in the various binding options below.
        cl_scoreboard_mouse_enable_binding "+attack2" // Allows use of the mouse on scoreboard
    //==================================================
 
    //================================================== MOUSE
        m_rawinput "1" // 1:1 raw mouse input (0 = Disabled, 1 = Enabled. Default = 0).
        sensitivity "1.250000" // In-game mouse sensitivity (Minimum = 0.000100, Maximum = 1000.000000. Default = 2.5).
        zoom_sensitivity_ratio_mouse "0.818933" // Factor of mouse sensitivity when aiming using scoped rifles (Default = 1.000000).
        m_mousespeed "0" // Mouse acceleration (Minimum = 0 [Disabled], 1+ = Enabled, Maximum = 2. Default = 1).
        m_customaccel "0" // Custom mouse acceleration (Minimum = 0 [Disabled], 1+ = Enabled, Maximum = 3. Default = 0).
        m_pitch "0.022" // Pitch factor (Minimum = 0.000100, Maximum = 1000.000000. Default = 0.022).
        m_yaw "0.022" // Yaw factor (Minimum = 0.000100, Maximum = 1000.000000. Default = 0.022).
        m_forward "1" // Forward factor (Default = 1).
        m_side "0.8" // Side factor (Default = 0.8).
        // BINDS
            bind "MOUSE1" "+attack"
            bind "MOUSE2" "+attack2"
            bind "MOUSE3" "player_ping"
            bind "MWHEELUP" "invprev"
            bind "MWHEELDOWN" "invnext"
    //==================================================
 
    //================================================== KEYBOARD
        // MOVEMENT
            bind "w" "+forward;" // FORWARD
            bind "a" "+moveleft;" // LEFT
            bind "s" "+back;" // BACKWARD
            bind "d" "+moveright" // RIGHT
            // CREEP
                bind "shift" "+creep"
                alias "+creep" "+speed; volume 1; voice_scale 0.25"
                alias "-creep" "-speed; volume 0.75; voice_scale 0.75"
            // CRAWL
                bind "ctrl" "+crawl"
                alias "+crawl" "+duck; volume 1; voice_scale 0.25"
                alias "-crawl" "-duck; volume 0.75; voice_scale 0.75"
            bind "space" "+jump"// JUMP
            // DOUBLE JUMP
                bind "alt" "+double_jump"
                alias "+double_jump" "playvol player\suit_sprint 0.5; +jump; +duck"
                alias "-double_jump" "-jump; -duck"
        // INTERACTION
            bind "e" "+use; -use"
            // DEFUSE TOGGLE
                bind "q" "defuse_ON"
                alias "defuse_ON" "+use; bind q defuse_OFF"
                alias "defuse_OFF" "-use; bind q defuse_ON"
            bind "r" "+reload"
            bind "f" "+lookatweapon"
            bind "g" "drop"
            // DROP BOMB
                bind "z" "+dropbomb"
                alias "+dropbomb" "use weapon_c4; drop"
                alias "-dropbomb" "slot1"
            bind "v" "use weapon_knife;slot1" // Knife bind
            bind "b" "buymenu"
            // BUYNDS
                 bind "" "buy vesthelm; buy defuser; buy incgrenade; buy molotov; buy flashbang; buy smokegrenade; buy hegrenade;" // Buy script for armour and nades, so you can choose your own primary and secondary.
        // INFO
            bind "c" "r_cleardecals"
            // DISPLAY DAMAGE
                bind "x" "display_damage_ON"
                alias "display_damage_ON" "playvol player\vo\sas\incombat05 0.5; clear; developer 1; con_filter_enable 2; con_filter_text Damage; con_filter_text_out Player:; alias display_damage_OFF"
                alias "display_damage_OFF" "playvol buttons\button14 0.5; developer 0; con_filter_enable 0; clear; alias display_damage_ON"
            // SCOREBOARD/NETGRAPH COMBO
                bind "tab" "+scorenet"
                alias "+scorenet" "+showscores; net_graphheight 0"
                alias "-scorenet" "-showscores; net_graphheight 9999"
            // CHAT
                bind "" "+voicerecord" // Mouse side end solo button
                bind "y" "messagemode"
                bind "u" "messagemode2"
                bind "v" "callvote"
            bind "`" "toggleconsole"
        bind "escape" "cancelselect"
        // CLUTCH MODE
            bind "capslock" "clutch"
            alias "clutch" "clutch_ON"
            alias "clutch_ON" "play player\vo\sas\peptalk06; volume 1; voice_scale 0.25; r_cleardecals; alias clutch clutch_OFF"
            alias "clutch_OFF" "play player\vo\sas\onarollbrag13; volume 0.75; voice_scale 0.75; alias clutch clutch_ON"
    //==================================================
 
    //================================================== RADIO COMMANDS RADIAL WHEEL
        bind "cl_radial_radio_tab_0_text_1" "#Chatwheel_aplan"
        bind "cl_radial_radio_tab_0_text_2" "#Chatwheel_oneenemyhere"
        bind "cl_radial_radio_tab_0_text_3" "#Chatwheel_multipleenemieshere"
        bind "cl_radial_radio_tab_0_text_4" "#Chatwheel_needbackup"
        bind "cl_radial_radio_tab_0_text_5" "#Chatwheel_bplan"
        bind "cl_radial_radio_tab_0_text_6" "#Chatwheel_ihavethebomb"
        bind "cl_radial_radio_tab_0_text_7" "#Chatwheel_droppedbomb"
        bind "cl_radial_radio_tab_0_text_8" "#Chatwheel_bombcarrierspotted"
    //==================================================
 
//================================================== CONTROLS
 
 
 
 
//================================================== EXECUTION
    playvol "ui\mm_success_lets_roll" "0.5" // Plays "Let's Roll" soundbite when the config is loaded.
    host_writeconfig
    clear
 
    echo "--------------------------------------------------------------------------------------------------------------"
    echo "--------------------------------------------------------------------------------------------------------------"
    echo "------------------------------    autoexec.cfg has successfully been loaded!    ------------------------------"
    echo "--------------------------------------------------------------------------------------------------------------"
    echo "--------------------------------------------------------------------------------------------------------------"
//==================================================
